type library_path_item =
  | Module of { name: string; href: string; }
  | ModuleType of { name: string; href: string; }
  | Parameter of { name: string; href: string; number: int; }
  | Class of { name: string; href: string; }
  | ClassType of { name: string; href: string; }

type docs_path =
  | Index
  | Page of string
  | Library of string * library_path_item list

let kind_tag (m : library_path_item) = match m with
  | Module _ ->
    <span tabindex="0" aria-label="module" class="breadcrumbs-tag module-tag">Module</span>
  | ModuleType _ ->
    <span tabindex="0" aria-label="module type" class="breadcrumbs-tag module-type-tag">Module type</span>
  | Parameter { number; _ } ->
    <span tabindex="0" aria-label="<%s "Parameter #" ^ (Int.to_string number) %>" class="breadcrumbs-tag parameter-tag"><%s "Parameter #" ^ (Int.to_string number) %></span>
  | Class _ ->
    <span tabindex="0" aria-label="class" class="breadcrumbs-tag class-tag">Class</span>
  | ClassType _ ->
    <span tabindex="0" aria-label="class type" class="breadcrumbs-tag class-type-tag">Class type</span>

type path =
  | Overview of string option
  | Documentation of (docs_path)

let render_package_and_version
~path
?page
?hash
(package: Package.package)
=
  let version = Package.url_version package in
  let url (version : string option) =
    match path with
    | Overview _ -> Url.Package.overview package.name ?version
    | Documentation _ -> Url.Package.documentation package.name ?version ?hash ?page
  in
   <div class="flex gap-4 justify-center">
   <h1 class="m-0 text-3xl"><span class="sr-only">package </span><a class="font-semibold text-3xl" href="<%s Url.Package.overview package.name ?version %>"><%s package.name %></a></h1>     
     <details
   x-data="{
    open: false, 
    selectedOption: '<%s "latest (" ^ package.latest_version ^ ")" %>',
    options: [      
        <%s! package.versions |> List.map (fun v -> "'" ^ v ^ "'") |> String.concat ", " %>
    ],
    moveSelection(offset) {
        const currentIndex = this.options.indexOf(this.selectedOption);

        if (!this.open) {
            this.open = true;
        } else {
            const newIndex = currentIndex + offset;

            if (newIndex >= 0 && newIndex < this.options.length) {
                this.selectedOption = this.options[newIndex];

                this.$nextTick(() => {
                    const dropdown = this.$refs.dropdown;
                    const selectedOptionElement = dropdown.querySelector('.selected');

                    if (selectedOptionElement) {
                        const isAboveViewport = selectedOptionElement.offsetTop < dropdown.scrollTop;
                        const isBelowViewport = (selectedOptionElement.offsetTop + selectedOptionElement.offsetHeight) > (dropdown.scrollTop + dropdown.offsetHeight);

                        if (isAboveViewport) {
                            dropdown.scrollTop = selectedOptionElement.offsetTop;
                        } else if (isBelowViewport) {
                            dropdown.scrollTop = selectedOptionElement.offsetTop + selectedOptionElement.offsetHeight - dropdown.offsetHeight;
                        }
                    }
                });
            }
        }
    },
    closePanel() {
        this.open = false;
    }

    }"

      @click.away="open = false"
      x-on:keydown.escape.prevent.stop="close($refs.button)"
      x-on:focusin.window="!$refs.panel.contains($event.target) && close()"
      class="relative z-30"
      >
      <!-- Button -->


      <summary
      @keydown.arrow-down.prevent="moveSelection(1)"
        @keydown.arrow-up.prevent="moveSelection(-1)"
        @keydown.enter.prevent="selectOption(selectedOption)"
        onclick="this.style.boxShadow = '0 0 1px white'; this.style.borderColor = 'orange';"
        @click="open = !open"
        x-ref="button"
        :aria-expanded="open"
        type="button"
        class="flex h-10 items-center gap-2 bg-white p-4  rounded-md shadow
          leading-8 appearance-none focus:outline-none focus:ring-4  cursor-pointer  rounded-md border border-gray-400"
      >
        <span x-html="selectedOption"></span>
        <!-- Heroicon: chevron-down -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </summary>


      <!-- Panel -->
     <div
            x-show="open"
            @click.away="closePanel"
            x-ref="dropdown"
            class="absolute max-h-[500px] z-24 w-80 p-4 overflow-y-auto left-0 mt-2 rounded-md bg-white shadow-md"
        >
            <template x-for="(option, index) in options" :key="index">
                <a  x-bind:href="option" href="#" x-on:click="selectOption(option); closePanel"
               
                    x-bind:class="{ 'bg-blue-900 text-white': selectedOption === option, 'selected': selectedOption === option }"
                    class="focus:outline-none  focus-visible:bg-blue-900 focus-visible:text-white flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm disabled:text-gray-500"
                >
                    <span x-html=" option"></span>
                </a>
                <a href="<%s url None %>"> hi </a>
            </template>
        </div>
      </details>
      </div>



type breadcrumb = {
  name: string;
  href: string;
}

let library_path_item_to_breadcrumb = function
  | Module x -> { name = x.name; href = x.href }
  | ModuleType x -> { name = x.name; href = x.href }
  | Class x -> { name = x.name; href = x.href }
  | ClassType x -> { name = x.name; href = x.href }
  | Parameter x -> { name = x.name; href = x.href }

let render_library_path_breadcrumbs
~library_name
~(path: library_path_item list) =
  let render_breadcrumb i b =
    if i < List.length path - 1 then
      <a href="<%s! b.href %>" class="font-semibold underline text-gray-800"><%s b.name %></a>
    else
      <a href="<%s! b.href %>" aria-current="page" class="text-gray-800 mr-2"><%s b.name %></a>
  in
  <li>
    <span tabindex="0" class="text-lighter"><%s library_name %> lib</span>
  </li>
  <li class="flex flex-wrap items-center">
    <%s! String.concat "<span>.</span>" (path |> List.map library_path_item_to_breadcrumb |> List.mapi render_breadcrumb); %>
    <%s! kind_tag (List.hd (List.rev path)) %>
  </li>

let render_docs_path_breadcrumbs
~(path: docs_path)
(package: Package.package)
  =
  let version = Package.url_version package in
  <nav aria-label="breadcrumb" class="flex mb-6 border-b pb-6">
    <ul class="flex flex-wrap gap-x-2 text-base leading-7 package-breadcrumbs">
      <li>
        <a class="underline font-semibold" href="<%s! Url.Package.documentation package.name ?version %>">Documentation</a>
      </li>
      <% (match path with
         | Index -> %>
      <% | Library (library_name, library_path) -> %>
        <%s! if library_path != [] then render_library_path_breadcrumbs ~library_name ~path:library_path else "ERROR: library path is []" %>
      <% | Page page_name  -> %>
        <li>
          <span><%s page_name %></span>
        </li>
      <% ); %>
    </ul>
  </nav>


let render_overview_breadcrumbs
(page: string option)
=
  <nav aria-label="breadcrumbs" class="flex mb-6 border-b">
    <ul class="flex flex-wrap gap-x-2 leading-8 package-breadcrumbs">
      <% (match page with | Some p -> %>
      <li><%s p %></li>
      <% | None -> ()); %>
    </ul>
  </nav>

let render
~(path: path)
(package: Package.package)
=
  match path with
    | Overview page -> render_overview_breadcrumbs page
    | Documentation (docs_path) -> render_docs_path_breadcrumbs ~path:docs_path package
